name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
       
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
       
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist
          if [ -f setup.py ] || [ -f pyproject.toml ]; then
            pip install -e .[dev] || pip install -e .
          fi
       
      - name: Verify environment
        run: |
          python --version
          pip list | grep -E "torch|numpy|pyyaml|pytest" || true
          echo "Test directory structure:"
          find tests/ -name "*.py" | head -10 || echo "No test files found"
          echo "ThinkRL package structure:"
          find thinkrl/ -name "*.py" | head -10 || echo "No source files found"
       
      - name: Run tests
        run: |
          python -m pytest tests/ -v \
            --cov=thinkrl \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=70 \
            --tb=short
        env:
          CUDA_VISIBLE_DEVICES: ""
          PYTHONPATH: ${{ github.workspace }}
       
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' && github.event_name == 'push'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
       
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
       
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit safety
       
      - name: Check code formatting with Black
        run: |
          echo "üîç Checking code formatting..."
          black --check --diff thinkrl/ tests/ || (
            echo "‚ùå Code formatting issues found!"
            echo "üí° To fix locally, run: black thinkrl/ tests/"
            exit 1
          )
       
      - name: Check import sorting with isort
        run: |
          echo "üîç Checking import sorting..."
          isort --check-only --diff thinkrl/ tests/ || (
            echo "‚ùå Import sorting issues found!"
            echo "üí° To fix locally, run: isort thinkrl/ tests/"
            exit 1
          )
       
      - name: Lint with flake8
        run: |
          echo "üîç Running flake8 linting..."
          flake8 thinkrl/ tests/ \
            --max-line-length=88 \
            --extend-ignore=E203,W503,E501 \
            --exclude=__pycache__,*.pyc,.git,build,dist,.tox,.pytest_cache \
            --show-source \
            --statistics
       
      - name: Type check with mypy
        run: |
          echo "üîç Running type checking..."
          mypy thinkrl/ \
            --ignore-missing-imports \
            --no-strict-optional \
            --warn-return-any \
            --warn-unused-configs || echo "‚ö†Ô∏è Type checking completed with warnings"
       
      - name: Security check with bandit
        run: |
          echo "üîç Running security checks..."
          bandit -r thinkrl/ -f json -o bandit-report.json || true
          bandit -r thinkrl/ || echo "‚ö†Ô∏è Security check completed with warnings"
       
      - name: Check dependencies for security vulnerabilities
        run: |
          echo "üîç Checking dependencies for vulnerabilities..."
          safety check || echo "‚ö†Ô∏è Dependency security check completed with warnings"

  format-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
       
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
       
      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort pre-commit
       
      - name: Auto-format check with Black
        run: |
          echo "üé® Checking if files need formatting..."
          black --check --diff thinkrl/ tests/ || (
            echo "‚ùå Code formatting issues found!"
            echo "üí° To fix locally, run: black thinkrl/ tests/"
            echo "üìù Files that need formatting:"
            black --check thinkrl/ tests/ 2>&1 | grep "would reformat" || true
            exit 1
          )
       
      - name: Check import sorting
        run: |
          echo "üì¶ Checking import sorting..."
          isort --check-only --diff thinkrl/ tests/ || (
            echo "‚ùå Import sorting issues found!"
            echo "üí° To fix locally, run: isort thinkrl/ tests/"
            echo "üìù Files with import issues:"
            isort --check-only thinkrl/ tests/ 2>&1 | grep "ERROR" || true
            exit 1
          )
       
      - name: Validate pre-commit hooks (if present)
        run: |
          if [ -f .pre-commit-config.yaml ]; then
            echo "üé£ Running pre-commit validation..."
            pre-commit run --all-files || echo "‚ö†Ô∏è Pre-commit checks completed with warnings"
          else
            echo "‚ÑπÔ∏è  No pre-commit config found, skipping..."
          fi

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
       
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
       
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel
       
      - name: Build package
        run: |
          echo "üì¶ Building package..."
          python -m build
       
      - name: Check package
        run: |
          echo "üîç Checking package integrity..."
          twine check dist/*
       
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 7

  compatibility:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.11']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
       
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
       
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
       
      - name: Run compatibility tests
        run: |
          python -c "import thinkrl; print(f'ThinkRL imported successfully on {platform.system()}')" || echo "Import test failed"
          python -m pytest tests/ -k "not slow" --tb=short || echo "Some tests failed on this platform"
        env:
          PYTHONPATH: ${{ github.workspace }}